<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\457_001_GUI_CardFirmware Rev01_1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\457_001_GUI_CardFirmware Rev01_1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue May 02 16:50:59 2023
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; StandbyStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3]">Reset_Handler</a>
 <LI><a href="#[9a]">__user_initial_stackheap</a>
 <LI><a href="#[4]">Undef_Handler</a>
 <LI><a href="#[5]">SWI_Handler</a>
 <LI><a href="#[6]">PAbt_Handler</a>
 <LI><a href="#[7]">DAbt_Handler</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[9]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undef_Handler</a><BR>
 <LI><a href="#[5]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SWI_Handler</a><BR>
 <LI><a href="#[6]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PAbt_Handler</a><BR>
 <LI><a href="#[7]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DAbt_Handler</a><BR>
 <LI><a href="#[8]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ_Handler</a><BR>
 <LI><a href="#[9]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">DAbt_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[9]">FIQ_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[8]">IRQ_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[6]">PAbt_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[5]">SWI_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[c]">Timr0_Intrupt_Handler</a> from peripheral_intrfs.o(.text) referenced from xray_irq.o(.text)
 <LI><a href="#[d]">Timr1_Intrupt_Handler</a> from peripheral_intrfs.o(.text) referenced from xray_irq.o(.text)
 <LI><a href="#[e]">Timr2_Intrupt_Handler</a> from peripheral_intrfs.o(.text) referenced from xray_irq.o(.text)
 <LI><a href="#[4]">Undef_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[f]">__main</a> from __main.o(!!!main) referenced from lpc2400.o(RESET)
 <LI><a href="#[b]">main</a> from guic_main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ab]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ac]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ad]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[16]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[af]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[be]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[11]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[13]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[17]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[19]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[cb]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1b]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d]"></a>Normalise_XrayParamtr</STRONG> (ARM, 1312 bytes, Stack size 56 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FndOrdinalNumOfShortArr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPresetProtocol
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_XrayParmtrs
</UL>

<P><STRONG><a name="[56]"></a>CheckErr</STRONG> (ARM, 192 bytes, Stack size 0 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[4a]"></a>DcodeErr</STRONG> (ARM, 112 bytes, Stack size 0 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[57]"></a>SendPreCalibData</STRONG> (ARM, 772 bytes, Stack size 0 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[22]"></a>SaveCalibRefAdjstVal</STRONG> (ARM, 372 bytes, Stack size 32 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveCalibRefAdjstVal &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[24]"></a>PopCorseCalibVal</STRONG> (ARM, 688 bytes, Stack size 48 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PopCorseCalibVal &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibGain
</UL>

<P><STRONG><a name="[26]"></a>LoadEepromSelfCorctDat</STRONG> (ARM, 376 bytes, Stack size 24 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoadEepromSelfCorctDat &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibGain
</UL>

<P><STRONG><a name="[27]"></a>PopCorseCalibGain</STRONG> (ARM, 348 bytes, Stack size 8 bytes, cntrlcardintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PopCorseCalibGain &rArr; PopCorseCalibVal &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEepromSelfCorctDat
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibVal
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[2a]"></a>PinFunctnSel</STRONG> (ARM, 916 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPorts
</UL>

<P><STRONG><a name="[2c]"></a>PinModeSel</STRONG> (ARM, 888 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPorts
</UL>

<P><STRONG><a name="[2b]"></a>ConfigGPIO</STRONG> (ARM, 1044 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPorts
</UL>

<P><STRONG><a name="[2d]"></a>InitCcGPIO</STRONG> (ARM, 656 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPorts
</UL>

<P><STRONG><a name="[29]"></a>ConfigPorts</STRONG> (ARM, 60 bytes, Stack size 4 bytes, configureuc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ConfigPorts
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCcGPIO
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPIO
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinModeSel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinFunctnSel
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>ConfigADC</STRONG> (ARM, 88 bytes, Stack size 8 bytes, configureuc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigADC
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[30]"></a>ConfigSPI1</STRONG> (ARM, 40 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[32]"></a>ConfigTimer0</STRONG> (ARM, 44 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[33]"></a>ConfigTimer1</STRONG> (ARM, 44 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[34]"></a>ConfigTimer2</STRONG> (ARM, 64 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[35]"></a>ConfigRs485</STRONG> (ARM, 60 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[2f]"></a>ConfigPeripherals</STRONG> (ARM, 40 bytes, Stack size 8 bytes, configureuc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConfigPeripherals &rArr; ConfigADC
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlashSsp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRs485
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer0
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSPI1
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigADC
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[37]"></a>ConfigurePLL</STRONG> (ARM, 300 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystm
</UL>

<P><STRONG><a name="[38]"></a>ConfigPerphClk</STRONG> (ARM, 20 bytes, Stack size 0 bytes, configureuc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystm
</UL>

<P><STRONG><a name="[36]"></a>ConfigSystm</STRONG> (ARM, 20 bytes, Stack size 4 bytes, configureuc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ConfigSystm
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPerphClk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>InitVariables</STRONG> (ARM, 980 bytes, Stack size 24 bytes, configureuc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitVariables &rArr; PopPowerModeKey &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPowerModeKey
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopLastExposeProtocol
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopLastCalibPointer
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLowPwrModeKey
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirstBoot
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FndOrdinalNumOfShortArr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[3f]"></a>FaultStateFn</STRONG> (ARM, 568 bytes, Stack size 8 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FaultStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLcdFrame
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultSteScanKeyPadMatrix
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcodeErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>CalibStateFn</STRONG> (ARM, 880 bytes, Stack size 16 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CalibStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix_CalibSte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchCalDltaTuhdEeprm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChekSelProtocolAbrtCndtn
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoShutDownColimtr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibRefAdjstVal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPreCalibData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>WarningStateFn</STRONG> (ARM, 680 bytes, Stack size 8 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WarningStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLcdFrame
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>CoolingStateFn</STRONG> (ARM, 832 bytes, Stack size 8 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CoolingStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLcdFrame
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushLastExposeProtocol
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushCalibExposeProtocol
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>ExposureStateFn</STRONG> (ARM, 936 bytes, Stack size 8 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ExposureStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLcdFrame
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>EnableStateFn</STRONG> (ARM, 964 bytes, Stack size 8 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EnableStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>StandbyStateFn</STRONG> (ARM, 1372 bytes, Stack size 16 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StandbyStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanIndpndntKeys
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoShutDownColimtr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>InitStateFn</STRONG> (ARM, 380 bytes, Stack size 16 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitStateFn &rArr; ScanKeyPadMatrix &rArr; DeCodeUsrCommand_PreSetFetch &rArr; PopPresetProtocol &rArr; Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateXrayPeripherals
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaitStsLcd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushPopAPRValues
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitScreenLCD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibGain
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SleepModeFn</STRONG> (ARM, 352 bytes, Stack size 16 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SleepModeFn &rArr; SleepScreenLCD &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdtRs485Txdata
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepScreenLCD
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (ARM, 236 bytes, Stack size 0 bytes, guic_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; StandbyStateFn &rArr; DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInterrupt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSystm
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPorts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[74]"></a>ComnDutyEvryKeyPrs</STRONG> (ARM, 60 bytes, Stack size 0 bytes, keypad_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix_CalibSte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultSteScanKeyPadMatrix
</UL>

<P><STRONG><a name="[67]"></a>ScanColumn1</STRONG> (ARM, 672 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ScanColumn1 &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix_CalibSte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[69]"></a>ScanColumn2</STRONG> (ARM, 672 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ScanColumn2 &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix_CalibSte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[6a]"></a>ScanColumn3</STRONG> (ARM, 596 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ScanColumn3 &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[6b]"></a>ScanColumn4</STRONG> (ARM, 812 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ScanColumn4 &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultSteScanKeyPadMatrix
</UL>

<P><STRONG><a name="[1e]"></a>FndOrdinalNumOfShortArr</STRONG> (ARM, 104 bytes, Stack size 12 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FndOrdinalNumOfShortArr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopAPRdataToRAM
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchAPR_Data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>

<P><STRONG><a name="[6c]"></a>FetchAPR_Data</STRONG> (ARM, 748 bytes, Stack size 48 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FetchAPR_Data &rArr; FndOrdinalNumOfShortArr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FndOrdinalNumOfShortArr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_OpMode
</UL>

<P><STRONG><a name="[6e]"></a>LimitXrayParameters</STRONG> (ARM, 384 bytes, Stack size 0 bytes, keypad_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_XrayParmtrs
</UL>

<P><STRONG><a name="[6d]"></a>DeCodeUsrCommand_XrayParmtrs</STRONG> (ARM, 2220 bytes, Stack size 16 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DeCodeUsrCommand_XrayParmtrs &rArr; Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitXrayParameters
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[6f]"></a>DeCodeUsrCommand_OpMode</STRONG> (ARM, 956 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DeCodeUsrCommand_OpMode &rArr; FetchAPR_Data &rArr; FndOrdinalNumOfShortArr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchAPR_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[75]"></a>DeCodeUsrCommand_XrayPeriphrls</STRONG> (ARM, 564 bytes, Stack size 0 bytes, keypad_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[70]"></a>DeCodeUsrCommand_PreSetFetch</STRONG> (ARM, 608 bytes, Stack size 16 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeCodeUsrCommand_PreSetFetch &rArr; PopPresetProtocol &rArr; Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavPresetExposeProtocol
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavAprExposeProtocol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPresetProtocol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchAPR_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix
</UL>

<P><STRONG><a name="[41]"></a>FaultSteScanKeyPadMatrix</STRONG> (ARM, 376 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FaultSteScanKeyPadMatrix &rArr; ScanColumn4 &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComnDutyEvryKeyPrs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[5f]"></a>ScanKeyPadMatrix</STRONG> (ARM, 452 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanKeyPadMatrix &rArr; DeCodeUsrCommand_PreSetFetch &rArr; PopPresetProtocol &rArr; Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_XrayPeriphrls
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_OpMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_XrayParmtrs
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComnDutyEvryKeyPrs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
</UL>

<P><STRONG><a name="[49]"></a>ScanIndpndntKeys</STRONG> (ARM, 200 bytes, Stack size 0 bytes, keypad_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[3b]"></a>CheckLowPwrModeKey</STRONG> (ARM, 104 bytes, Stack size 0 bytes, keypad_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_CalibParmtrs
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[76]"></a>DeCodeUsrCommand_CalibParmtrs</STRONG> (ARM, 1312 bytes, Stack size 16 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DeCodeUsrCommand_CalibParmtrs &rArr; ShowCalibResult &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLowPwrModeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKeyPadMatrix_CalibSte
</UL>

<P><STRONG><a name="[51]"></a>ScanKeyPadMatrix_CalibSte</STRONG> (ARM, 372 bytes, Stack size 8 bytes, keypad_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ScanKeyPadMatrix_CalibSte &rArr; DeCodeUsrCommand_CalibParmtrs &rArr; ShowCalibResult &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_CalibParmtrs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComnDutyEvryKeyPrs
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[77]"></a>DecodeValuToASCII</STRONG> (ARM, 160 bytes, Stack size 32 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DecodeValuToASCII &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
</UL>

<P><STRONG><a name="[7b]"></a>DecodeHexValuToASCII</STRONG> (ARM, 160 bytes, Stack size 16 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DecodeHexValuToASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
</UL>

<P><STRONG><a name="[62]"></a>ShowWaitStsLcd</STRONG> (ARM, 236 bytes, Stack size 16 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowWaitStsLcd &rArr; LCD_SetCursor &rArr; lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[65]"></a>SleepScreenLCD</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SleepScreenLCD &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
</UL>

<P><STRONG><a name="[61]"></a>DispInitScreenLCD</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DispInitScreenLCD &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[46]"></a>DispNormalScreenLCD</STRONG> (ARM, 1552 bytes, Stack size 8 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DispNormalScreenLCD &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHexValuToASCII
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValuToASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[7c]"></a>PrintCascadedString</STRONG> (ARM, 168 bytes, Stack size 24 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainErrorCode
</UL>

<P><STRONG><a name="[7d]"></a>ExplainErrorCode</STRONG> (ARM, 764 bytes, Stack size 16 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCascadedString
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
</UL>

<P><STRONG><a name="[4b]"></a>DispStatusLineLCD</STRONG> (ARM, 1916 bytes, Stack size 24 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DispStatusLineLCD &rArr; ExplainErrorCode &rArr; PrintCascadedString &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainErrorCode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValuToASCII
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaitStsLcd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[54]"></a>FetchCalDltaTuhdEeprm</STRONG> (ARM, 896 bytes, Stack size 0 bytes, lcd_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[55]"></a>ChekSelProtocolAbrtCndtn</STRONG> (ARM, 172 bytes, Stack size 0 bytes, lcd_intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[50]"></a>ShowCalibScreen</STRONG> (ARM, 228 bytes, Stack size 8 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ShowCalibScreen &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHexValuToASCII
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValuToASCII
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[52]"></a>ShowCalibResult</STRONG> (ARM, 636 bytes, Stack size 24 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ShowCalibResult &rArr; lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushLowPowerModeKey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushHiPowerModeKey
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValuToASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_CalibParmtrs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[40]"></a>RefreshLcdFrame</STRONG> (ARM, 148 bytes, Stack size 8 bytes, lcd_intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RefreshLcdFrame &rArr; lcd_clear &rArr; lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[c]"></a>Timr0_Intrupt_Handler</STRONG> (ARM, 108 bytes, Stack size 8 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timr0_Intrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xray_irq.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>Timr1_Intrupt_Handler</STRONG> (ARM, 256 bytes, Stack size 8 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timr1_Intrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xray_irq.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>Timr2_Intrupt_Handler</STRONG> (ARM, 588 bytes, Stack size 8 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timr2_Intrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xray_irq.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>Delay_1uSec</STRONG> (ARM, 32 bytes, Stack size 0 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Flag
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxStrngDcodFn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDAC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPowerModeKey
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigADC
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibGain
</UL>

<P><STRONG><a name="[68]"></a>Delay_100nSec</STRONG> (ARM, 80 bytes, Stack size 24 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn1
</UL>

<P><STRONG><a name="[83]"></a>ADC0Read</STRONG> (ARM, 200 bytes, Stack size 0 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
</UL>

<P><STRONG><a name="[48]"></a>SlctInAdcChNdSOC</STRONG> (ARM, 616 bytes, Stack size 40 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SlctInAdcChNdSOC &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[87]"></a>WriteDAC</STRONG> (ARM, 296 bytes, Stack size 8 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDAC
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLoadScheduler
</UL>

<P><STRONG><a name="[4d]"></a>DacLoadScheduler</STRONG> (ARM, 376 bytes, Stack size 4 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DacLoadScheduler &rArr; WriteDAC
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDAC
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[45]"></a>UpdateXrayPeripherals</STRONG> (ARM, 260 bytes, Stack size 0 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[47]"></a>UpdateLED</STRONG> (ARM, 76 bytes, Stack size 0 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[7e]"></a>CalculateLineRes</STRONG> (ARM, 216 bytes, Stack size 24 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalculateLineRes &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
</UL>

<P><STRONG><a name="[53]"></a>AutoShutDownColimtr</STRONG> (ARM, 116 bytes, Stack size 0 bytes, peripheral_intrfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
</UL>

<P><STRONG><a name="[cc]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, xray_irq.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>init_VIC</STRONG> (ARM, 84 bytes, Stack size 0 bytes, xray_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInterrupt
</UL>

<P><STRONG><a name="[8a]"></a>install_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, xray_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = install_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInterrupt
</UL>

<P><STRONG><a name="[66]"></a>ConfigInterrupt</STRONG> (ARM, 64 bytes, Stack size 4 bytes, xray_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ConfigInterrupt &rArr; install_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_irq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VIC
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>waste_lcd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, xray_lcd4bit.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, xray_lcd4bit.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>lcd_write_4bit</STRONG> (ARM, 116 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[8e]"></a>lcd_write_cmd</STRONG> (ARM, 100 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[79]"></a>lcd_putchar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCascadedString
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaitStsLcd
</UL>

<P><STRONG><a name="[4c]"></a>lcd_init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_init &rArr; lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[78]"></a>LCD_SetCursor</STRONG> (ARM, 188 bytes, Stack size 16 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetCursor &rArr; lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCascadedString
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepScreenLCD
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaitStsLcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitScreenLCD
</UL>

<P><STRONG><a name="[4e]"></a>lcd_clear</STRONG> (ARM, 36 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_clear &rArr; lcd_write_cmd &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepScreenLCD
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshLcdFrame
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitScreenLCD
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[7a]"></a>lcd_printS</STRONG> (ARM, 40 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_printS &rArr; lcd_putchar &rArr; lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCascadedString
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepScreenLCD
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibScreen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStatusLineLCD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNormalScreenLCD
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitScreenLCD
</UL>

<P><STRONG><a name="[92]"></a>InitStringWith</STRONG> (ARM, 40 bytes, Stack size 0 bytes, rs485communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxStrngDcodFn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
</UL>

<P><STRONG><a name="[44]"></a>UpdtRs485Txdata</STRONG> (ARM, 664 bytes, Stack size 0 bytes, rs485communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[90]"></a>Rs485TxFramer</STRONG> (ARM, 244 bytes, Stack size 0 bytes, rs485communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxDataFn
</UL>

<P><STRONG><a name="[42]"></a>Rs485TxDataFn</STRONG> (ARM, 448 bytes, Stack size 4 bytes, rs485communication.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rs485TxDataFn
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485TxFramer
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[93]"></a>ChekRxBuffrEOF</STRONG> (ARM, 76 bytes, Stack size 0 bytes, rs485communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
</UL>

<P><STRONG><a name="[91]"></a>Rs485RxStrngDcodFn</STRONG> (ARM, 508 bytes, Stack size 16 bytes, rs485communication.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rs485RxStrngDcodFn
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStringWith
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxDataFn
</UL>

<P><STRONG><a name="[43]"></a>Rs485RxDataFn</STRONG> (ARM, 540 bytes, Stack size 16 bytes, rs485communication.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rs485RxDataFn &rArr; Rs485RxStrngDcodFn
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485RxStrngDcodFn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChekRxBuffrEOF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStringWith
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepModeFn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyStateFn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableStateFn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExposureStateFn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarningStateFn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibStateFn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStateFn
</UL>

<P><STRONG><a name="[31]"></a>InitFlashSsp</STRONG> (ARM, 372 bytes, Stack size 0 bytes, nvmintrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeripherals
</UL>

<P><STRONG><a name="[95]"></a>Data_Send</STRONG> (ARM, 48 bytes, Stack size 0 bytes, nvmintrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Flag
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_id
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
</UL>

<P><STRONG><a name="[94]"></a>read_id</STRONG> (ARM, 112 bytes, Stack size 12 bytes, nvmintrface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
</UL>

<P><STRONG><a name="[96]"></a>Check_Busy_Flag</STRONG> (ARM, 116 bytes, Stack size 16 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>

<P><STRONG><a name="[23]"></a>Write_NVM</STRONG> (ARM, 276 bytes, Stack size 32 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Flag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAPRdataToFlash
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushLowPowerModeKey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushHiPowerModeKey
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavPresetExposeProtocol
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavAprExposeProtocol
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushPopAPRValues
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushLastExposeProtocol
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushCalibExposeProtocol
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEepromSelfCorctDat
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibRefAdjstVal
</UL>

<P><STRONG><a name="[25]"></a>Read_NVM</STRONG> (ARM, 312 bytes, Stack size 32 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopAPRdataToRAM
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPresetProtocol
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopPowerModeKey
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopLastExposeProtocol
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopLastCalibPointer
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirstBoot
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibVal
</UL>

<P><STRONG><a name="[3d]"></a>PopLastExposeProtocol</STRONG> (ARM, 352 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PopLastExposeProtocol &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[71]"></a>PopPresetProtocol</STRONG> (ARM, 504 bytes, Stack size 16 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PopPresetProtocol &rArr; Normalise_XrayParamtr &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
</UL>

<P><STRONG><a name="[3c]"></a>PopLastCalibPointer</STRONG> (ARM, 156 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PopLastCalibPointer &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[5b]"></a>PushLastExposeProtocol</STRONG> (ARM, 164 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PushLastExposeProtocol &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
</UL>

<P><STRONG><a name="[5a]"></a>PushCalibExposeProtocol</STRONG> (ARM, 108 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PushCalibExposeProtocol &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolingStateFn
</UL>

<P><STRONG><a name="[72]"></a>SavPresetExposeProtocol</STRONG> (ARM, 184 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SavPresetExposeProtocol &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
</UL>

<P><STRONG><a name="[73]"></a>SavAprExposeProtocol</STRONG> (ARM, 336 bytes, Stack size 24 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SavAprExposeProtocol &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
</UL>

<P><STRONG><a name="[3a]"></a>PopPowerModeKey</STRONG> (ARM, 204 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PopPowerModeKey &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[7f]"></a>PushLowPowerModeKey</STRONG> (ARM, 116 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PushLowPowerModeKey &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
</UL>

<P><STRONG><a name="[80]"></a>PushHiPowerModeKey</STRONG> (ARM, 112 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PushHiPowerModeKey &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCalibResult
</UL>

<P><STRONG><a name="[97]"></a>PopAPRdataToRAM</STRONG> (ARM, 500 bytes, Stack size 24 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PopAPRdataToRAM &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FndOrdinalNumOfShortArr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushPopAPRValues
</UL>

<P><STRONG><a name="[98]"></a>PushAPRdataToFlash</STRONG> (ARM, 336 bytes, Stack size 24 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PushAPRdataToFlash &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushPopAPRValues
</UL>

<P><STRONG><a name="[3e]"></a>CheckFirstBoot</STRONG> (ARM, 172 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckFirstBoot &rArr; Read_NVM
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[63]"></a>PushPopAPRValues</STRONG> (ARM, 560 bytes, Stack size 8 bytes, nvmintrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PushPopAPRValues &rArr; PushAPRdataToFlash &rArr; Write_NVM &rArr; Check_Busy_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAPRdataToFlash
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopAPRdataToRAM
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStateFn
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValuToASCII
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeUsrCommand_PreSetFetch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchAPR_Data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCorseCalibVal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>

<P><STRONG><a name="[d0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d3]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d4]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[d5]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
</UL>

<P><STRONG><a name="[d7]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 32 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
</UL>

<P><STRONG><a name="[a0]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[d9]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a2]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlctInAdcChNdSOC
</UL>

<P><STRONG><a name="[a1]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[9f]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[9e]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
</UL>

<P><STRONG><a name="[a3]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>

<P><STRONG><a name="[a6]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalise_XrayParamtr
</UL>

<P><STRONG><a name="[da]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[a8]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>

<P><STRONG><a name="[a7]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLineRes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>

<P><STRONG><a name="[a9]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[a4]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>lcd_read_status</STRONG> (ARM, 276 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>

<P><STRONG><a name="[8c]"></a>wait_while_busy</STRONG> (ARM, 28 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>

<P><STRONG><a name="[8f]"></a>lcd_write_data</STRONG> (ARM, 104 bytes, Stack size 8 bytes, xray_lcd4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_write_data &rArr; lcd_write_4bit &rArr; Delay_100nSec &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100nSec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1uSec
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
